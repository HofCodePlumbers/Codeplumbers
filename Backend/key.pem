# SECURITY NOTICE
#
# This file previously contained a private key that was removed for security reasons.
# Hard-coded private keys in source code represent a serious security vulnerability
# (CWE-321, CWE-540, CWE-798).
#
# SECURE KEY MANAGEMENT RECOMMENDATIONS:
#
# FOR PRODUCTION:
# 1. NEVER commit private keys to source code repositories
# 2. Store private keys in a secure key management service or protected location
#    - Use environment variables to specify the path to the key file
#    - Ensure proper file permissions (e.g., chmod 600)
#    - Consider using AWS KMS, Azure Key Vault, HashiCorp Vault, etc.
# 3. Load keys at runtime from secure storage
# 4. Implement key rotation procedures
#
# FOR TESTING/DEVELOPMENT:
# 1. Generate temporary test keys that are not used in production
# 2. Store test keys outside the repository
# 3. Example command to generate a test key (not for production use):
#    openssl genpkey -algorithm RSA -out test_key.pem -pkeyopt rsa_keygen_bits:2048
#
# TO USE THIS FILE:
# - Replace this placeholder with code that loads the private key from a secure location
# - Example implementation (adapt to your language/framework):
#   
#   function getPrivateKey() {
#     const keyPath = process.env.PRIVATE_KEY_PATH;
#     if (!keyPath) {
#       throw new Error('PRIVATE_KEY_PATH environment variable not set');
#     }
#     return fs.readFileSync(keyPath, 'utf8');
#   }
#
# For more information on secure key management:
# - https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html